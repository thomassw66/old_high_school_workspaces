import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeSet;


public class QinShiRoadSystem {

	public static void main(String [] args){
		System.out.println(Double.POSITIVE_INFINITY+1);
		Scanner in = new Scanner (System.in);
		int co = in.nextInt();
		for(int cot = 0; cot < co; cot++){
			int n = in.nextInt();
			int x[] = new int [n];
			int y[] = new int [n];
			int population [] = new int [n];
			for(int i = 0; i < n; i++){
				x[i] = in.nextInt();
				y[i] = in.nextInt();
				population[i] = in.nextInt();
			}
			ArrayList<Double> [] distance = new ArrayList[n];
			ArrayList<Integer>[] vertex = new ArrayList[n];
			for(int i = 0; i < n; i++){//make the graph
				distance[i] = new ArrayList<Double>(n);
				vertex[i] = new ArrayList<Integer>(n);
				for(int j = 0; j < n; j++){
					if(i != j){
						vertex[i].add(j);
						distance[i].add(Math.sqrt((x[i] - x[j]) * (x[i] - x[j]) + (y[i] - y[j]) * (y[i] - y[j])));
					}
				}
			}
			
		}
	}
	// min spaning tree with a & b already connected
	int modifiedprims(ArrayList<Double > [] distances, ArrayList<Integer> [] vertex, int n, int a, int b){
		boolean [] intree = new boolean [n];
		double d [] = new double [n];
		
		double total = 0.0;
		
		for(int i = 0; i < n; i++){
			intree [i] = false;
			d[i] = Double.POSITIVE_INFINITY;
		}
		intree[a] = true;
		intree[b] = true;
		d[a] = 0.0;
		d[b] = 0.0;
		
		for(int i = 0; i < distances[a].size(); i++){
			int v = vertex[a].get(i);
			double dist = distances[a].get(i);
			if(dist < d[v]){
				d[v] = dist;
			}
		}
		return 0;
	}
}